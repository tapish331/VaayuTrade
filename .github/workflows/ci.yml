name: CI

on:
  push:
    branches: [ main, '**/*' ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ci:
    name: ${{ matrix.lang }} / ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        lang: [python, node]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- Node lane ----------
      - name: Setup Node (LTS)
        if: matrix.lang == 'node'
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install pnpm via Corepack
        if: matrix.lang == 'node'
        id: pnpm-install
        run: |
          corepack enable
          corepack prepare pnpm@9.9.0 --activate
          pnpm --version

      - name: Resolve pnpm store path
        if: matrix.lang == 'node'
        id: pnpm-store
        run: echo "STORE_PATH=$(pnpm store path)" >> "$GITHUB_OUTPUT"

      - name: Cache pnpm store
        if: matrix.lang == 'node'
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-store.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install Node deps
        if: matrix.lang == 'node'
        run: pnpm install --frozen-lockfile=false

      - name: Lint (eslint)
        if: matrix.lang == 'node'
        run: pnpm lint

      - name: Typecheck (tsc --noEmit)
        if: matrix.lang == 'node'
        run: pnpm run typecheck

      - name: Unit tests (node:test)
        if: matrix.lang == 'node'
        run: pnpm run test:js

      # ---------- Python lane ----------
      - name: Setup Python
        if: matrix.lang == 'python'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Cache Poetry & venv
        if: matrix.lang == 'python'
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            .venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install Poetry
        if: matrix.lang == 'python'
        run: |
          python -m pip install --upgrade pip
          python -m pip install pipx
          pipx install poetry
          echo "POETRY_VIRTUALENVS_IN_PROJECT=true" >> $GITHUB_ENV
          poetry --version

      - name: Install Python deps
        if: matrix.lang == 'python'
        run: |
          poetry env use 3.11
          poetry install --no-interaction --no-root

      - name: Lint (ruff + black --check)
        if: matrix.lang == 'python'
        run: |
          poetry run ruff check .
          poetry run black --check .

      - name: Typecheck (mypy)
        if: matrix.lang == 'python'
        run: poetry run mypy .

      - name: Unit tests (pytest)
        if: matrix.lang == 'python'
        run: poetry run pytest -q
